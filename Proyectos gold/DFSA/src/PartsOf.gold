using gold.structures.automaton.*
using gold.visualization.automaton.*
using gold.structures.map.*
using gold.**

procedure main ( args : String [ ] ) begin
c = createCoder ( )
d = createCoder( )
Utilities.testCodeDecode(c,d)
end

var w

function createCoder ( ) : ITransducer begin

estado = ('0'‥'3') ∪ {λ}
w := ""

Q := (estado × estado × estado × estado) ∪ {"Error"} 
Σ := ( 'a' ‥ 'z' ) ∪ ('0'‥'3') 
Out := ( '0' ‥ '3' ) ∪ ( 'a' ‥ 'z' ) ∪ {'*'} 
q₀ := ⟨λ,λ,λ,λ⟩
F := Q 
return GDeterministicTransducer ( Q , Σ , Out , q₀ , F , δ , g , h )
end



function δ ( q, s ) begin
	
	return "Error"
	
end

function δ (⟨d0, d1, d2, d3⟩, s) begin
	
	if d0 = λ and s ∈ ('0'‥'3') then return ⟨s, d1, d2, d3⟩
		
	elseif d1 = λ and s ∈ ('0'‥'3') then return ⟨d0, s, d2, d3⟩
	
	elseif d2 = λ and s ∈ ('0'‥'3') then return ⟨d0, d1, s, d3⟩
	
	elseif d3 = λ and s ∈ ('0'‥'3') then return ⟨d0, d1, d2, s⟩
	
	elseif d3 != λ and s ∈ ('a'‥'z') then
		
		len := w.length()
		
		if len = 0 then
			
			w = Character.toString(s)
			
			return w
			
		elseif len = 1 then
			
			w = w + Character.toString(s)
			
			return w

  		elseif len = 2 then
			
			w = w + Character.toString(s)
			return w
		elseif len = 4 then
			
			w = ""
			return w
			
		else return "Error"
			
		end
		
	else return "Error"
		
	end

end

 function h ( q ) begin
return λ
end


function g (⟨d0, d1, d2, d3⟩, s) begin
	
	len := w.length()
	
	if len = 3 and d0 != λ and d1 != λ and d2 != λ and d3 != λ and s ∈ ('a'‥'z') then
		
		w_x = w + s
		return w_x.charAt(d0) + w_x.charAt(d1) + w_x.charAt(d2) + w_x.charAt(d3) + ""
	
	elseif len = 4 and d0 != λ and d1 != λ and d2 != λ and d3 != λ then
		
		w_x = w 
		return w_x.charAt(d0) + w_x.charAt(d1) + w_x.charAt(d2) + w_x.charAt(d3) + ""
		
	elseif len = 0 and d0 != λ and d1 != λ and d2 != λ and d3 != λ then
		
		 d = new GArrayList()
		 d.add(d0)
		 d.add(d1)
		 d.add(d2)
		 d.add(d3)
		 
		 inverso = new GArrayList()
		 inverso.add(0)
		 inverso.add(0)
		 inverso.add(0)
		 inverso.add(0)
		 
		 inverso[d[0]] = 0 
		 inverso[d[1]] = 1
		 inverso[d[2]] = 2
		 inverso[d[3]] = 3
		 
		return inverso
	
	elseif len%4 = 0 and d0 != λ and d1 != λ and d2 != λ and d3 != λ  and s = "$" then
		return ""
		
	elseif len = 1 and d0 != λ and d1 != λ and d2 != λ and d3 != λ then
		return  w + "***" 
	
	elseif len = 2 and d0 != λ and d1 != λ and d2 != λ and d3 != λ then
		return  w + "**" 
	
	elseif len = 3 and d0 != λ and d1 != λ and d2 != λ and d3 != λ then
		return  w + "*" 
		
	else
		return λ
		
	end
end




